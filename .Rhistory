knitr::opts_chunk$set(echo = TRUE)
#Load the package
library(Rqc)
#Get the path to the file
folder <- system.file(package="ShortRead", "extdata/E-MTAB-1147")
# feeds fastq.qz files in "folder" to quality check function
qcRes <- rqc(path = folder, pattern = ".fastq.gz", openBrowser=FALSE)
rqcCycleQualityBoxPlot(qcRes)
q <- rqcCycleQualityBoxPlot(qcRes)
q
```{r 2.5.1 Sequencing Quality per Base/cycle, eval=TRUE}
rqcCycleQualityBoxPlot(qcRes)
rqcCycleBaseCallsLinePlot(qcRes)
```{r 2.5.1 Sequencing Quality per Base/cycle, echo=TRUE}
rqcCycleQualityBoxPlot(qcRes)
rqcReadFrequencyPlot(qcRes)
library(fastqcr)
# Demo QC directory containing zipped FASTQC reports
qc.dir <- system.file("fastqc_results", package = "fastqcr")
qc <- qc_aggregate(qc.dir)
qc
# See which modules failed in the most samples
qc_fails(qc, "module")
# Or, see which samples failed the most
qc_fails(qc, "sample")
# Building Multi QC Reports
qc_report(qc.dir, result.file = "multi-qc-report" )
qc
# Building One-Sample QC Reports (+ Interpretation)
qc.file <- system.file("fastqc_results", "S1_fastqc.zip", package = "fastqcr")
qc_report(qc.file, result.file = "one-sample-report",
interpret = TRUE)
git status
system("conda env list")
BiocManager::install("QuasR")
library(QuasR)
# obtain a list of fastq file paths
fastqFiles <- system.file(package="ShortRead",
"extdata/E-MTAB-1147",
c("ERR127302_1_subset.fastq.gz",
"ERR127302_2_subset.fastq.gz")
)
# defined processed fastq file names
outfiles <- paste(tempfile(pattern=c("processed_1_",
"processed_2_")),".fastq",sep="")
)
# defined processed fastq file names
outfiles <- paste(tempfile(pattern=c("processed_1_",
"processed_2_")),".fastq",sep="")
# process fastq files
# remove reads that have more than 1 N, (nBases)
# trim 3 bases from the end of the reads (truncateEndBases)
# Remove ACCCGGGA patern if it occurs at the start (Lpattern)
# remove reads shorter than 40 base-pairs (minLength)
preprocessReads(fastqFiles, outfiles,
nBases=1,
truncateEndBases=3,
Lpattern="ACCCGGGA",
minLength=40)
library(ShortRead)
# obtain a list of fastq file paths
fastqFile <- system.file(package="ShortRead",
"extdata/E-MTAB-1147",
"ERR127302_1_subset.fastq.gz")
# read fastq file
fq = readFastq(fastqFile)
# get quality scores per base as a matrix
qPerBase = as(quality(fq), "matrix")
# get number of bases per read that have quality score below 20
# we use this
qcount = rowSums( qPerBase <= 20)
# Number of reads where all Phred scores >= 20
fq[which(qcount == 0)]
#mode = 'a' allows you to rewrite files that are already written
ShortRead::writeFastq( fq[which(qcount == 0)], paste(getwd(), "Qfiltered3.fastq", sep="/"), mode = 'a')
# set up streaming with block size 1000
# every time we call the yield() function 1000 read portion
# of the file will be read successively.
f <- FastqStreamer(fastqFile,readerBlockSize=1000)
# we set up a while loop to call yield() function to
# go through the file
while(length(fq <- yield(f))) {
# remove reads where all quality scores are < 20
# get quality scores per base as a matrix
qPerBase = as(quality(fq), "matrix")
# get number of bases per read that have Q score < 20
qcount = rowSums( qPerBase <= 20)
# write fastq file with mode="a", so every new block
# is written out to the same file
writeFastq(fq[which(qcount == 0)],
paste(fastqFile, "Qfiltered", sep="_", mode = 'a'),
mode="a")
}
usethis::create_from_github("https://github.com/oceannewang/BIOL4315_Lab3_OW.git", destdir = "~/repos/")
usethis::create_from_github("https://github.com/oceannewang/BIOL4315_Lab3_OW.git", destdir = "~/repos/BIOL4315_Lab3_OW/")
usethis::create_from_github("https://github.com/oceannewang/BIOL4315_Lab3_OW.git", destdir = "~/BIOL4315_Lab3_OW/")
usethis::create_from_github("https://github.com/oceannewang/BIOL4315_Lab3_OW.git", destdir = "~/Desktop/BIOL4315_Lab3_OW/")
system("pwd")
here::dr_here()
